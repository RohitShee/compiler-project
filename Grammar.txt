<program>         -> <element> <program> | EPSILON
<element>         -> <function> | <global_statement>

<global_statement> -> <declaration> | <assignment> | <expression_stmt> | <read_stmt> | <print_stmt>

<function>        -> <type> ID LPAREN <params> RPAREN LBRACE <statements> RBRACE

<params>          -> <param_list> | EPSILON
<param_list>      -> <param> COMMA <param_list> | <param>
<param>           -> <type> ID

<type>            -> INT | FLOAT | VOID

<statements>      -> <statement> <statements> | EPSILON
<statement>       -> <declaration> | <read_stmt> | <print_stmt> | <if_else_stmt> | <assignment> | <expression_stmt> | <return_stmt>

<declaration>     -> <type> ID <optional_init> SEMICOLON
<optional_init>   -> EQUALS <expression> | EPSILON

<read_stmt>       -> READ ID SEMICOLON
<print_stmt>      -> PRINT ID SEMICOLON
<return_stmt>     -> RETURN <optional_ret_value> SEMICOLON
<optional_ret_value> -> <expression> | EPSILON

<if_else_stmt>    -> IF LPAREN <condition> RPAREN LBRACE <statements> RBRACE ELSE LBRACE <statements> RBRACE

<condition>       -> <additive_expression> <rel_op> <additive_expression>
<rel_op>          -> LT | GT | EQ

<assignment>      -> ID EQUALS <expression> SEMICOLON

<expression>      -> <additive_expression>

<additive_expression> -> <additive_expression> PLUS <term> | <additive_expression> MINUS <term> | <term>

<term>            -> <term> MULTIPLY <factor> | <term> DIVIDE <factor> | <term> MOD <factor> | <factor>

<factor>          -> <variable_or_call> | LPAREN <expression> RPAREN | <literal> | <unary_op> <factor>

<variable_or_call> -> ID <postfix_or_call>
<postfix_or_call> -> INCREMENT | LPAREN <args> RPAREN | EPSILON
<args>            -> <expression_list> | EPSILON
<expression_list> -> <expression> COMMA <expression_list> | <expression>

<literal>         -> INT_LIT | FLOAT_LIT
<unary_op>        -> PLUS | MINUS

<expression_stmt> -> <expression> SEMICOLON